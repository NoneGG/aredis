
Command compatibility
=====================

This document is generated by parsing the `official redis command documentation <https://redis.io/commands>`_


Redis Client
^^^^^^^^^^^^




Generic
-------



COPY
****

Copy a key

- Documentation: `COPY <https://redis.io/commands/copy>`_
- Implementation: :meth:`~coredis.Redis.copy`

- New in redis: 6.2.0



- .. versionadded:: 3.0.0





DEL
***

Delete a key

- Documentation: `DEL <https://redis.io/commands/del>`_
- Implementation: :meth:`~coredis.Redis.delete`







DUMP
****

Return a serialized version of the value stored at the specified key.

- Documentation: `DUMP <https://redis.io/commands/dump>`_
- Implementation: :meth:`~coredis.Redis.dump`







EXISTS
******

Determine if a key exists

- Documentation: `EXISTS <https://redis.io/commands/exists>`_
- Implementation: :meth:`~coredis.Redis.exists`







EXPIRE
******

Set a key's time to live in seconds

- Documentation: `EXPIRE <https://redis.io/commands/expire>`_
- Implementation: :meth:`~coredis.Redis.expire`







EXPIREAT
********

Set the expiration for a key as a UNIX timestamp

- Documentation: `EXPIREAT <https://redis.io/commands/expireat>`_
- Implementation: :meth:`~coredis.Redis.expireat`







EXPIRETIME
**********

Get the expiration Unix timestamp for a key

- Documentation: `EXPIRETIME <https://redis.io/commands/expiretime>`_
- Implementation: :meth:`~coredis.Redis.expiretime`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





KEYS
****

Find all keys matching the given pattern

- Documentation: `KEYS <https://redis.io/commands/keys>`_
- Implementation: :meth:`~coredis.Redis.keys`







MIGRATE
*******

Atomically transfer a key from a Redis instance to another one.

- Documentation: `MIGRATE <https://redis.io/commands/migrate>`_
- Implementation: :meth:`~coredis.Redis.migrate`



- .. versionadded:: 3.0.0





MOVE
****

Move a key to another database

- Documentation: `MOVE <https://redis.io/commands/move>`_
- Implementation: :meth:`~coredis.Redis.move`







OBJECT ENCODING
***************

Inspect the internal encoding of a Redis object

- Documentation: `OBJECT ENCODING <https://redis.io/commands/object-encoding>`_
- Implementation: :meth:`~coredis.Redis.object_encoding`







OBJECT FREQ
***********

Get the logarithmic access frequency counter of a Redis object

- Documentation: `OBJECT FREQ <https://redis.io/commands/object-freq>`_
- Implementation: :meth:`~coredis.Redis.object_freq`







OBJECT IDLETIME
***************

Get the time since a Redis object was last accessed

- Documentation: `OBJECT IDLETIME <https://redis.io/commands/object-idletime>`_
- Implementation: :meth:`~coredis.Redis.object_idletime`







OBJECT REFCOUNT
***************

Get the number of references to the value of the key

- Documentation: `OBJECT REFCOUNT <https://redis.io/commands/object-refcount>`_
- Implementation: :meth:`~coredis.Redis.object_refcount`







PERSIST
*******

Remove the expiration from a key

- Documentation: `PERSIST <https://redis.io/commands/persist>`_
- Implementation: :meth:`~coredis.Redis.persist`







PEXPIRE
*******

Set a key's time to live in milliseconds

- Documentation: `PEXPIRE <https://redis.io/commands/pexpire>`_
- Implementation: :meth:`~coredis.Redis.pexpire`







PEXPIREAT
*********

Set the expiration for a key as a UNIX timestamp specified in milliseconds

- Documentation: `PEXPIREAT <https://redis.io/commands/pexpireat>`_
- Implementation: :meth:`~coredis.Redis.pexpireat`







PEXPIRETIME
***********

Get the expiration Unix timestamp for a key in milliseconds

- Documentation: `PEXPIRETIME <https://redis.io/commands/pexpiretime>`_
- Implementation: :meth:`~coredis.Redis.pexpiretime`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





PTTL
****

Get the time to live for a key in milliseconds

- Documentation: `PTTL <https://redis.io/commands/pttl>`_
- Implementation: :meth:`~coredis.Redis.pttl`







RANDOMKEY
*********

Return a random key from the keyspace

- Documentation: `RANDOMKEY <https://redis.io/commands/randomkey>`_
- Implementation: :meth:`~coredis.Redis.randomkey`







RENAME
******

Rename a key

- Documentation: `RENAME <https://redis.io/commands/rename>`_
- Implementation: :meth:`~coredis.Redis.rename`







RENAMENX
********

Rename a key, only if the new key does not exist

- Documentation: `RENAMENX <https://redis.io/commands/renamenx>`_
- Implementation: :meth:`~coredis.Redis.renamenx`







RESTORE
*******

Create a key using the provided serialized value, previously obtained using DUMP.

- Documentation: `RESTORE <https://redis.io/commands/restore>`_
- Implementation: :meth:`~coredis.Redis.restore`







SCAN
****

Incrementally iterate the keys space

- Documentation: `SCAN <https://redis.io/commands/scan>`_
- Implementation: :meth:`~coredis.Redis.scan`







SORT
****

Sort the elements in a list, set or sorted set

- Documentation: `SORT <https://redis.io/commands/sort>`_
- Implementation: :meth:`~coredis.Redis.sort`







SORT_RO
*******

Sort the elements in a list, set or sorted set. Read-only variant of SORT.

- Documentation: `SORT_RO <https://redis.io/commands/sort_ro>`_
- Implementation: :meth:`~coredis.Redis.sort_ro`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





TOUCH
*****

Alters the last access time of a key(s). Returns the number of existing keys specified.

- Documentation: `TOUCH <https://redis.io/commands/touch>`_
- Implementation: :meth:`~coredis.Redis.touch`







TTL
***

Get the time to live for a key in seconds

- Documentation: `TTL <https://redis.io/commands/ttl>`_
- Implementation: :meth:`~coredis.Redis.ttl`







TYPE
****

Determine the type stored at key

- Documentation: `TYPE <https://redis.io/commands/type>`_
- Implementation: :meth:`~coredis.Redis.type`







UNLINK
******

Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.

- Documentation: `UNLINK <https://redis.io/commands/unlink>`_
- Implementation: :meth:`~coredis.Redis.unlink`







WAIT
****

Wait for the synchronous replication of all the write commands sent in the context of the current connection

- Documentation: `WAIT <https://redis.io/commands/wait>`_
- Implementation: :meth:`~coredis.Redis.wait`










String
------



APPEND
******

Append a value to a key

- Documentation: `APPEND <https://redis.io/commands/append>`_
- Implementation: :meth:`~coredis.Redis.append`







DECR
****

Decrement the integer value of a key by one

- Documentation: `DECR <https://redis.io/commands/decr>`_
- Implementation: :meth:`~coredis.Redis.decr`







DECRBY
******

Decrement the integer value of a key by the given number

- Documentation: `DECRBY <https://redis.io/commands/decrby>`_
- Implementation: :meth:`~coredis.Redis.decrby`







GET
***

Get the value of a key

- Documentation: `GET <https://redis.io/commands/get>`_
- Implementation: :meth:`~coredis.Redis.get`







GETDEL
******

Get the value of a key and delete the key

- Documentation: `GETDEL <https://redis.io/commands/getdel>`_
- Implementation: :meth:`~coredis.Redis.getdel`

- New in redis: 6.2.0







GETEX
*****

Get the value of a key and optionally set its expiration

- Documentation: `GETEX <https://redis.io/commands/getex>`_
- Implementation: :meth:`~coredis.Redis.getex`

- New in redis: 6.2.0







GETRANGE
********

Get a substring of the string stored at a key

- Documentation: `GETRANGE <https://redis.io/commands/getrange>`_
- Implementation: :meth:`~coredis.Redis.getrange`







GETSET
******

Set the string value of a key and return its old value

- Documentation: `GETSET <https://redis.io/commands/getset>`_
- Implementation: :meth:`~coredis.Redis.getset`


- Deprecated in redis: 6.2.0. Use :meth:`~coredis.Redis.set_` with the ``!get`` argument






INCR
****

Increment the integer value of a key by one

- Documentation: `INCR <https://redis.io/commands/incr>`_
- Implementation: :meth:`~coredis.Redis.incr`







INCRBY
******

Increment the integer value of a key by the given amount

- Documentation: `INCRBY <https://redis.io/commands/incrby>`_
- Implementation: :meth:`~coredis.Redis.incrby`







INCRBYFLOAT
***********

Increment the float value of a key by the given amount

- Documentation: `INCRBYFLOAT <https://redis.io/commands/incrbyfloat>`_
- Implementation: :meth:`~coredis.Redis.incrbyfloat`







LCS
***

Find longest common substring

- Documentation: `LCS <https://redis.io/commands/lcs>`_
- Implementation: :meth:`~coredis.Redis.lcs`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





MGET
****

Get the values of all the given keys

- Documentation: `MGET <https://redis.io/commands/mget>`_
- Implementation: :meth:`~coredis.Redis.mget`







MSET
****

Set multiple keys to multiple values

- Documentation: `MSET <https://redis.io/commands/mset>`_
- Implementation: :meth:`~coredis.Redis.mset`







MSETNX
******

Set multiple keys to multiple values, only if none of the keys exist

- Documentation: `MSETNX <https://redis.io/commands/msetnx>`_
- Implementation: :meth:`~coredis.Redis.msetnx`







PSETEX
******

Set the value and expiration in milliseconds of a key

- Documentation: `PSETEX <https://redis.io/commands/psetex>`_
- Implementation: :meth:`~coredis.Redis.psetex`







SET
***

Set the string value of a key

- Documentation: `SET <https://redis.io/commands/set>`_
- Implementation: :meth:`~coredis.Redis.set`







SETEX
*****

Set the value and expiration of a key

- Documentation: `SETEX <https://redis.io/commands/setex>`_
- Implementation: :meth:`~coredis.Redis.setex`







SETNX
*****

Set the value of a key, only if the key does not exist

- Documentation: `SETNX <https://redis.io/commands/setnx>`_
- Implementation: :meth:`~coredis.Redis.setnx`







SETRANGE
********

Overwrite part of a string at key starting at the specified offset

- Documentation: `SETRANGE <https://redis.io/commands/setrange>`_
- Implementation: :meth:`~coredis.Redis.setrange`







STRLEN
******

Get the length of the value stored in a key

- Documentation: `STRLEN <https://redis.io/commands/strlen>`_
- Implementation: :meth:`~coredis.Redis.strlen`







SUBSTR
******

Get a substring of the string stored at a key

- Documentation: `SUBSTR <https://redis.io/commands/substr>`_
- Implementation: :meth:`~coredis.Redis.substr`










Bitmap
------



BITCOUNT
********

Count set bits in a string

- Documentation: `BITCOUNT <https://redis.io/commands/bitcount>`_
- Implementation: :meth:`~coredis.Redis.bitcount`







BITFIELD
********

Perform arbitrary bitfield integer operations on strings

- Documentation: `BITFIELD <https://redis.io/commands/bitfield>`_
- Implementation: :meth:`~coredis.Redis.bitfield`







BITFIELD_RO
***********

Perform arbitrary bitfield integer operations on strings. Read-only variant of BITFIELD

- Documentation: `BITFIELD_RO <https://redis.io/commands/bitfield_ro>`_
- Implementation: :meth:`~coredis.Redis.bitfield_ro`

- New in redis: 6.2.0







BITOP
*****

Perform bitwise operations between strings

- Documentation: `BITOP <https://redis.io/commands/bitop>`_
- Implementation: :meth:`~coredis.Redis.bitop`







BITPOS
******

Find first bit set or clear in a string

- Documentation: `BITPOS <https://redis.io/commands/bitpos>`_
- Implementation: :meth:`~coredis.Redis.bitpos`







GETBIT
******

Returns the bit value at offset in the string value stored at key

- Documentation: `GETBIT <https://redis.io/commands/getbit>`_
- Implementation: :meth:`~coredis.Redis.getbit`







SETBIT
******

Sets or clears the bit at offset in the string value stored at key

- Documentation: `SETBIT <https://redis.io/commands/setbit>`_
- Implementation: :meth:`~coredis.Redis.setbit`










Hash
----



HDEL
****

Delete one or more hash fields

- Documentation: `HDEL <https://redis.io/commands/hdel>`_
- Implementation: :meth:`~coredis.Redis.hdel`







HEXISTS
*******

Determine if a hash field exists

- Documentation: `HEXISTS <https://redis.io/commands/hexists>`_
- Implementation: :meth:`~coredis.Redis.hexists`







HGET
****

Get the value of a hash field

- Documentation: `HGET <https://redis.io/commands/hget>`_
- Implementation: :meth:`~coredis.Redis.hget`







HGETALL
*******

Get all the fields and values in a hash

- Documentation: `HGETALL <https://redis.io/commands/hgetall>`_
- Implementation: :meth:`~coredis.Redis.hgetall`







HINCRBY
*******

Increment the integer value of a hash field by the given number

- Documentation: `HINCRBY <https://redis.io/commands/hincrby>`_
- Implementation: :meth:`~coredis.Redis.hincrby`







HINCRBYFLOAT
************

Increment the float value of a hash field by the given amount

- Documentation: `HINCRBYFLOAT <https://redis.io/commands/hincrbyfloat>`_
- Implementation: :meth:`~coredis.Redis.hincrbyfloat`







HKEYS
*****

Get all the fields in a hash

- Documentation: `HKEYS <https://redis.io/commands/hkeys>`_
- Implementation: :meth:`~coredis.Redis.hkeys`







HLEN
****

Get the number of fields in a hash

- Documentation: `HLEN <https://redis.io/commands/hlen>`_
- Implementation: :meth:`~coredis.Redis.hlen`







HMGET
*****

Get the values of all the given hash fields

- Documentation: `HMGET <https://redis.io/commands/hmget>`_
- Implementation: :meth:`~coredis.Redis.hmget`







HMSET
*****

Set multiple hash fields to multiple values

- Documentation: `HMSET <https://redis.io/commands/hmset>`_
- Implementation: :meth:`~coredis.Redis.hmset`







HRANDFIELD
**********

Get one or multiple random fields from a hash

- Documentation: `HRANDFIELD <https://redis.io/commands/hrandfield>`_
- Implementation: :meth:`~coredis.Redis.hrandfield`

- New in redis: 6.2.0







HSCAN
*****

Incrementally iterate hash fields and associated values

- Documentation: `HSCAN <https://redis.io/commands/hscan>`_
- Implementation: :meth:`~coredis.Redis.hscan`







HSET
****

Set the string value of a hash field

- Documentation: `HSET <https://redis.io/commands/hset>`_
- Implementation: :meth:`~coredis.Redis.hset`







HSETNX
******

Set the value of a hash field, only if the field does not exist

- Documentation: `HSETNX <https://redis.io/commands/hsetnx>`_
- Implementation: :meth:`~coredis.Redis.hsetnx`







HSTRLEN
*******

Get the length of the value of a hash field

- Documentation: `HSTRLEN <https://redis.io/commands/hstrlen>`_
- Implementation: :meth:`~coredis.Redis.hstrlen`







HVALS
*****

Get all the values in a hash

- Documentation: `HVALS <https://redis.io/commands/hvals>`_
- Implementation: :meth:`~coredis.Redis.hvals`










List
----



BLMOVE
******

Pop an element from a list, push it to another list and return it; or block until one is available

- Documentation: `BLMOVE <https://redis.io/commands/blmove>`_
- Implementation: :meth:`~coredis.Redis.blmove`

- New in redis: 6.2.0







BLMPOP
******

Pop elements from a list, or block until one is available

- Documentation: `BLMPOP <https://redis.io/commands/blmpop>`_
- Implementation: :meth:`~coredis.Redis.blmpop`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





BLPOP
*****

Remove and get the first element in a list, or block until one is available

- Documentation: `BLPOP <https://redis.io/commands/blpop>`_
- Implementation: :meth:`~coredis.Redis.blpop`







BRPOP
*****

Remove and get the last element in a list, or block until one is available

- Documentation: `BRPOP <https://redis.io/commands/brpop>`_
- Implementation: :meth:`~coredis.Redis.brpop`







BRPOPLPUSH
**********

Pop an element from a list, push it to another list and return it; or block until one is available

- Documentation: `BRPOPLPUSH <https://redis.io/commands/brpoplpush>`_
- Implementation: :meth:`~coredis.Redis.brpoplpush`


- Deprecated in redis: 6.2.0. Use :meth:`~coredis.Redis.blmove` with the ``right`` and ``left`` arguments






LINDEX
******

Get an element from a list by its index

- Documentation: `LINDEX <https://redis.io/commands/lindex>`_
- Implementation: :meth:`~coredis.Redis.lindex`







LINSERT
*******

Insert an element before or after another element in a list

- Documentation: `LINSERT <https://redis.io/commands/linsert>`_
- Implementation: :meth:`~coredis.Redis.linsert`







LLEN
****

Get the length of a list

- Documentation: `LLEN <https://redis.io/commands/llen>`_
- Implementation: :meth:`~coredis.Redis.llen`







LMOVE
*****

Pop an element from a list, push it to another list and return it

- Documentation: `LMOVE <https://redis.io/commands/lmove>`_
- Implementation: :meth:`~coredis.Redis.lmove`

- New in redis: 6.2.0







LMPOP
*****

Pop elements from a list

- Documentation: `LMPOP <https://redis.io/commands/lmpop>`_
- Implementation: :meth:`~coredis.Redis.lmpop`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





LPOP
****

Remove and get the first elements in a list

- Documentation: `LPOP <https://redis.io/commands/lpop>`_
- Implementation: :meth:`~coredis.Redis.lpop`







LPOS
****

Return the index of matching elements on a list

- Documentation: `LPOS <https://redis.io/commands/lpos>`_
- Implementation: :meth:`~coredis.Redis.lpos`

- New in redis: 6.0.6







LPUSH
*****

Prepend one or multiple elements to a list

- Documentation: `LPUSH <https://redis.io/commands/lpush>`_
- Implementation: :meth:`~coredis.Redis.lpush`







LPUSHX
******

Prepend an element to a list, only if the list exists

- Documentation: `LPUSHX <https://redis.io/commands/lpushx>`_
- Implementation: :meth:`~coredis.Redis.lpushx`







LRANGE
******

Get a range of elements from a list

- Documentation: `LRANGE <https://redis.io/commands/lrange>`_
- Implementation: :meth:`~coredis.Redis.lrange`







LREM
****

Remove elements from a list

- Documentation: `LREM <https://redis.io/commands/lrem>`_
- Implementation: :meth:`~coredis.Redis.lrem`







LSET
****

Set the value of an element in a list by its index

- Documentation: `LSET <https://redis.io/commands/lset>`_
- Implementation: :meth:`~coredis.Redis.lset`







LTRIM
*****

Trim a list to the specified range

- Documentation: `LTRIM <https://redis.io/commands/ltrim>`_
- Implementation: :meth:`~coredis.Redis.ltrim`







RPOP
****

Remove and get the last elements in a list

- Documentation: `RPOP <https://redis.io/commands/rpop>`_
- Implementation: :meth:`~coredis.Redis.rpop`







RPOPLPUSH
*********

Remove the last element in a list, prepend it to another list and return it

- Documentation: `RPOPLPUSH <https://redis.io/commands/rpoplpush>`_
- Implementation: :meth:`~coredis.Redis.rpoplpush`


- Deprecated in redis: 6.2.0. Use :meth:`~coredis.Redis.lmove` with the ``right`` and ``left`` arguments






RPUSH
*****

Append one or multiple elements to a list

- Documentation: `RPUSH <https://redis.io/commands/rpush>`_
- Implementation: :meth:`~coredis.Redis.rpush`







RPUSHX
******

Append an element to a list, only if the list exists

- Documentation: `RPUSHX <https://redis.io/commands/rpushx>`_
- Implementation: :meth:`~coredis.Redis.rpushx`










Set
---



SADD
****

Add one or more members to a set

- Documentation: `SADD <https://redis.io/commands/sadd>`_
- Implementation: :meth:`~coredis.Redis.sadd`







SCARD
*****

Get the number of members in a set

- Documentation: `SCARD <https://redis.io/commands/scard>`_
- Implementation: :meth:`~coredis.Redis.scard`







SDIFF
*****

Subtract multiple sets

- Documentation: `SDIFF <https://redis.io/commands/sdiff>`_
- Implementation: :meth:`~coredis.Redis.sdiff`







SDIFFSTORE
**********

Subtract multiple sets and store the resulting set in a key

- Documentation: `SDIFFSTORE <https://redis.io/commands/sdiffstore>`_
- Implementation: :meth:`~coredis.Redis.sdiffstore`







SINTER
******

Intersect multiple sets

- Documentation: `SINTER <https://redis.io/commands/sinter>`_
- Implementation: :meth:`~coredis.Redis.sinter`







SINTERCARD
**********

Intersect multiple sets and return the cardinality of the result

- Documentation: `SINTERCARD <https://redis.io/commands/sintercard>`_
- Implementation: :meth:`~coredis.Redis.sintercard`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





SINTERSTORE
***********

Intersect multiple sets and store the resulting set in a key

- Documentation: `SINTERSTORE <https://redis.io/commands/sinterstore>`_
- Implementation: :meth:`~coredis.Redis.sinterstore`







SISMEMBER
*********

Determine if a given value is a member of a set

- Documentation: `SISMEMBER <https://redis.io/commands/sismember>`_
- Implementation: :meth:`~coredis.Redis.sismember`







SMEMBERS
********

Get all the members in a set

- Documentation: `SMEMBERS <https://redis.io/commands/smembers>`_
- Implementation: :meth:`~coredis.Redis.smembers`







SMISMEMBER
**********

Returns the membership associated with the given elements for a set

- Documentation: `SMISMEMBER <https://redis.io/commands/smismember>`_
- Implementation: :meth:`~coredis.Redis.smismember`

- New in redis: 6.2.0







SMOVE
*****

Move a member from one set to another

- Documentation: `SMOVE <https://redis.io/commands/smove>`_
- Implementation: :meth:`~coredis.Redis.smove`







SPOP
****

Remove and return one or multiple random members from a set

- Documentation: `SPOP <https://redis.io/commands/spop>`_
- Implementation: :meth:`~coredis.Redis.spop`







SRANDMEMBER
***********

Get one or multiple random members from a set

- Documentation: `SRANDMEMBER <https://redis.io/commands/srandmember>`_
- Implementation: :meth:`~coredis.Redis.srandmember`







SREM
****

Remove one or more members from a set

- Documentation: `SREM <https://redis.io/commands/srem>`_
- Implementation: :meth:`~coredis.Redis.srem`







SSCAN
*****

Incrementally iterate Set elements

- Documentation: `SSCAN <https://redis.io/commands/sscan>`_
- Implementation: :meth:`~coredis.Redis.sscan`







SUNION
******

Add multiple sets

- Documentation: `SUNION <https://redis.io/commands/sunion>`_
- Implementation: :meth:`~coredis.Redis.sunion`







SUNIONSTORE
***********

Add multiple sets and store the resulting set in a key

- Documentation: `SUNIONSTORE <https://redis.io/commands/sunionstore>`_
- Implementation: :meth:`~coredis.Redis.sunionstore`










Sorted-Set
----------



BZMPOP
******

Remove and return members with scores in a sorted set or block until one is available

- Documentation: `BZMPOP <https://redis.io/commands/bzmpop>`_
- Implementation: :meth:`~coredis.Redis.bzmpop`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





BZPOPMAX
********

Remove and return the member with the highest score from one or more sorted sets, or block until one is available

- Documentation: `BZPOPMAX <https://redis.io/commands/bzpopmax>`_
- Implementation: :meth:`~coredis.Redis.bzpopmax`







BZPOPMIN
********

Remove and return the member with the lowest score from one or more sorted sets, or block until one is available

- Documentation: `BZPOPMIN <https://redis.io/commands/bzpopmin>`_
- Implementation: :meth:`~coredis.Redis.bzpopmin`







ZADD
****

Add one or more members to a sorted set, or update its score if it already exists

- Documentation: `ZADD <https://redis.io/commands/zadd>`_
- Implementation: :meth:`~coredis.Redis.zadd`







ZCARD
*****

Get the number of members in a sorted set

- Documentation: `ZCARD <https://redis.io/commands/zcard>`_
- Implementation: :meth:`~coredis.Redis.zcard`







ZCOUNT
******

Count the members in a sorted set with scores within the given values

- Documentation: `ZCOUNT <https://redis.io/commands/zcount>`_
- Implementation: :meth:`~coredis.Redis.zcount`







ZDIFF
*****

Subtract multiple sorted sets

- Documentation: `ZDIFF <https://redis.io/commands/zdiff>`_
- Implementation: :meth:`~coredis.Redis.zdiff`

- New in redis: 6.2.0







ZDIFFSTORE
**********

Subtract multiple sorted sets and store the resulting sorted set in a new key

- Documentation: `ZDIFFSTORE <https://redis.io/commands/zdiffstore>`_
- Implementation: :meth:`~coredis.Redis.zdiffstore`

- New in redis: 6.2.0







ZINCRBY
*******

Increment the score of a member in a sorted set

- Documentation: `ZINCRBY <https://redis.io/commands/zincrby>`_
- Implementation: :meth:`~coredis.Redis.zincrby`







ZINTER
******

Intersect multiple sorted sets

- Documentation: `ZINTER <https://redis.io/commands/zinter>`_
- Implementation: :meth:`~coredis.Redis.zinter`

- New in redis: 6.2.0







ZINTERCARD
**********

Intersect multiple sorted sets and return the cardinality of the result

- Documentation: `ZINTERCARD <https://redis.io/commands/zintercard>`_
- Implementation: :meth:`~coredis.Redis.zintercard`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





ZINTERSTORE
***********

Intersect multiple sorted sets and store the resulting sorted set in a new key

- Documentation: `ZINTERSTORE <https://redis.io/commands/zinterstore>`_
- Implementation: :meth:`~coredis.Redis.zinterstore`







ZLEXCOUNT
*********

Count the number of members in a sorted set between a given lexicographical range

- Documentation: `ZLEXCOUNT <https://redis.io/commands/zlexcount>`_
- Implementation: :meth:`~coredis.Redis.zlexcount`







ZMPOP
*****

Remove and return members with scores in a sorted set

- Documentation: `ZMPOP <https://redis.io/commands/zmpop>`_
- Implementation: :meth:`~coredis.Redis.zmpop`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





ZMSCORE
*******

Get the score associated with the given members in a sorted set

- Documentation: `ZMSCORE <https://redis.io/commands/zmscore>`_
- Implementation: :meth:`~coredis.Redis.zmscore`

- New in redis: 6.2.0







ZPOPMAX
*******

Remove and return members with the highest scores in a sorted set

- Documentation: `ZPOPMAX <https://redis.io/commands/zpopmax>`_
- Implementation: :meth:`~coredis.Redis.zpopmax`







ZPOPMIN
*******

Remove and return members with the lowest scores in a sorted set

- Documentation: `ZPOPMIN <https://redis.io/commands/zpopmin>`_
- Implementation: :meth:`~coredis.Redis.zpopmin`







ZRANDMEMBER
***********

Get one or multiple random elements from a sorted set

- Documentation: `ZRANDMEMBER <https://redis.io/commands/zrandmember>`_
- Implementation: :meth:`~coredis.Redis.zrandmember`

- New in redis: 6.2.0







ZRANGE
******

Return a range of members in a sorted set

- Documentation: `ZRANGE <https://redis.io/commands/zrange>`_
- Implementation: :meth:`~coredis.Redis.zrange`







ZRANGEBYLEX
***********

Return a range of members in a sorted set, by lexicographical range

- Documentation: `ZRANGEBYLEX <https://redis.io/commands/zrangebylex>`_
- Implementation: :meth:`~coredis.Redis.zrangebylex`


- Deprecated in redis: 6.2.0. Use :meth:`~coredis.Redis.zrange` with the ``byscore`` argument






ZRANGEBYSCORE
*************

Return a range of members in a sorted set, by score

- Documentation: `ZRANGEBYSCORE <https://redis.io/commands/zrangebyscore>`_
- Implementation: :meth:`~coredis.Redis.zrangebyscore`


- Deprecated in redis: 6.2.0. Use :meth:`~coredis.Redis.zrange` with the ``byscore`` argument






ZRANGESTORE
***********

Store a range of members from sorted set into another key

- Documentation: `ZRANGESTORE <https://redis.io/commands/zrangestore>`_
- Implementation: :meth:`~coredis.Redis.zrangestore`

- New in redis: 6.2.0







ZRANK
*****

Determine the index of a member in a sorted set

- Documentation: `ZRANK <https://redis.io/commands/zrank>`_
- Implementation: :meth:`~coredis.Redis.zrank`







ZREM
****

Remove one or more members from a sorted set

- Documentation: `ZREM <https://redis.io/commands/zrem>`_
- Implementation: :meth:`~coredis.Redis.zrem`







ZREMRANGEBYLEX
**************

Remove all members in a sorted set between the given lexicographical range

- Documentation: `ZREMRANGEBYLEX <https://redis.io/commands/zremrangebylex>`_
- Implementation: :meth:`~coredis.Redis.zremrangebylex`







ZREMRANGEBYRANK
***************

Remove all members in a sorted set within the given indexes

- Documentation: `ZREMRANGEBYRANK <https://redis.io/commands/zremrangebyrank>`_
- Implementation: :meth:`~coredis.Redis.zremrangebyrank`







ZREMRANGEBYSCORE
****************

Remove all members in a sorted set within the given scores

- Documentation: `ZREMRANGEBYSCORE <https://redis.io/commands/zremrangebyscore>`_
- Implementation: :meth:`~coredis.Redis.zremrangebyscore`







ZREVRANGE
*********

Return a range of members in a sorted set, by index, with scores ordered from high to low

- Documentation: `ZREVRANGE <https://redis.io/commands/zrevrange>`_
- Implementation: :meth:`~coredis.Redis.zrevrange`


- Deprecated in redis: 6.2.0. Use :meth:`~coredis.Redis.zrange` with the ``rev`` argument






ZREVRANGEBYLEX
**************

Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.

- Documentation: `ZREVRANGEBYLEX <https://redis.io/commands/zrevrangebylex>`_
- Implementation: :meth:`~coredis.Redis.zrevrangebylex`


- Deprecated in redis: 6.2.0. Use :meth:`~coredis.Redis.zrange` with the ``rev`` and ``bylex`` arguments






ZREVRANGEBYSCORE
****************

Return a range of members in a sorted set, by score, with scores ordered from high to low

- Documentation: `ZREVRANGEBYSCORE <https://redis.io/commands/zrevrangebyscore>`_
- Implementation: :meth:`~coredis.Redis.zrevrangebyscore`


- Deprecated in redis: 6.2.0. Use :meth:`~coredis.Redis.zrange` with the ``rev`` and ``byscore`` arguments






ZREVRANK
********

Determine the index of a member in a sorted set, with scores ordered from high to low

- Documentation: `ZREVRANK <https://redis.io/commands/zrevrank>`_
- Implementation: :meth:`~coredis.Redis.zrevrank`







ZSCAN
*****

Incrementally iterate sorted sets elements and associated scores

- Documentation: `ZSCAN <https://redis.io/commands/zscan>`_
- Implementation: :meth:`~coredis.Redis.zscan`







ZSCORE
******

Get the score associated with the given member in a sorted set

- Documentation: `ZSCORE <https://redis.io/commands/zscore>`_
- Implementation: :meth:`~coredis.Redis.zscore`







ZUNION
******

Add multiple sorted sets

- Documentation: `ZUNION <https://redis.io/commands/zunion>`_
- Implementation: :meth:`~coredis.Redis.zunion`

- New in redis: 6.2.0







ZUNIONSTORE
***********

Add multiple sorted sets and store the resulting sorted set in a new key

- Documentation: `ZUNIONSTORE <https://redis.io/commands/zunionstore>`_
- Implementation: :meth:`~coredis.Redis.zunionstore`










Hyperloglog
-----------



PFADD
*****

Adds the specified elements to the specified HyperLogLog.

- Documentation: `PFADD <https://redis.io/commands/pfadd>`_
- Implementation: :meth:`~coredis.Redis.pfadd`







PFCOUNT
*******

Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).

- Documentation: `PFCOUNT <https://redis.io/commands/pfcount>`_
- Implementation: :meth:`~coredis.Redis.pfcount`







PFMERGE
*******

Merge N different HyperLogLogs into a single one.

- Documentation: `PFMERGE <https://redis.io/commands/pfmerge>`_
- Implementation: :meth:`~coredis.Redis.pfmerge`










Geo
---



GEOADD
******

Add one or more geospatial items in the geospatial index represented using a sorted set

- Documentation: `GEOADD <https://redis.io/commands/geoadd>`_
- Implementation: :meth:`~coredis.Redis.geoadd`







GEODIST
*******

Returns the distance between two members of a geospatial index

- Documentation: `GEODIST <https://redis.io/commands/geodist>`_
- Implementation: :meth:`~coredis.Redis.geodist`







GEOHASH
*******

Returns members of a geospatial index as standard geohash strings

- Documentation: `GEOHASH <https://redis.io/commands/geohash>`_
- Implementation: :meth:`~coredis.Redis.geohash`







GEOPOS
******

Returns longitude and latitude of members of a geospatial index

- Documentation: `GEOPOS <https://redis.io/commands/geopos>`_
- Implementation: :meth:`~coredis.Redis.geopos`







GEORADIUS
*********

Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point

- Documentation: `GEORADIUS <https://redis.io/commands/georadius>`_
- Implementation: :meth:`~coredis.Redis.georadius`


- Deprecated in redis: 6.2.0. Use :meth:`~coredis.Redis.geosearch` and :meth:`~coredis.Redis.geosearchstore` with the ``byradius`` argument






GEORADIUSBYMEMBER
*****************

Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member

- Documentation: `GEORADIUSBYMEMBER <https://redis.io/commands/georadiusbymember>`_
- Implementation: :meth:`~coredis.Redis.georadiusbymember`


- Deprecated in redis: 6.2.0. Use :meth:`~coredis.Redis.geosearch` and :meth:`~coredis.Redis.geosearchstore` with the ``byradius`` and ``frommember`` arguments






GEOSEARCH
*********

Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle.

- Documentation: `GEOSEARCH <https://redis.io/commands/geosearch>`_
- Implementation: :meth:`~coredis.Redis.geosearch`

- New in redis: 6.2.0







GEOSEARCHSTORE
**************

Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle, and store the result in another key.

- Documentation: `GEOSEARCHSTORE <https://redis.io/commands/geosearchstore>`_
- Implementation: :meth:`~coredis.Redis.geosearchstore`

- New in redis: 6.2.0










Stream
------



XACK
****

Marks a pending message as correctly processed, effectively removing it from the pending entries list of the consumer group. Return value of the command is the number of messages successfully acknowledged, that is, the IDs we were actually able to resolve in the PEL.

- Documentation: `XACK <https://redis.io/commands/xack>`_
- Implementation: :meth:`~coredis.Redis.xack`







XADD
****

Appends a new entry to a stream

- Documentation: `XADD <https://redis.io/commands/xadd>`_
- Implementation: :meth:`~coredis.Redis.xadd`







XAUTOCLAIM
**********

Changes (or acquires) ownership of messages in a consumer group, as if the messages were delivered to the specified consumer.

- Documentation: `XAUTOCLAIM <https://redis.io/commands/xautoclaim>`_
- Implementation: :meth:`~coredis.Redis.xautoclaim`

- New in redis: 6.2.0



- .. versionadded:: 3.0.0





XCLAIM
******

Changes (or acquires) ownership of a message in a consumer group, as if the message was delivered to the specified consumer.

- Documentation: `XCLAIM <https://redis.io/commands/xclaim>`_
- Implementation: :meth:`~coredis.Redis.xclaim`







XDEL
****

Removes the specified entries from the stream. Returns the number of items actually deleted, that may be different from the number of IDs passed in case certain IDs do not exist.

- Documentation: `XDEL <https://redis.io/commands/xdel>`_
- Implementation: :meth:`~coredis.Redis.xdel`







XGROUP CREATE
*************

Create a consumer group.

- Documentation: `XGROUP CREATE <https://redis.io/commands/xgroup-create>`_
- Implementation: :meth:`~coredis.Redis.xgroup_create`







XGROUP CREATECONSUMER
*********************

Create a consumer in a consumer group.

- Documentation: `XGROUP CREATECONSUMER <https://redis.io/commands/xgroup-createconsumer>`_
- Implementation: :meth:`~coredis.Redis.xgroup_createconsumer`

- New in redis: 6.2.0



- .. versionadded:: 3.0.0





XGROUP DELCONSUMER
******************

Delete a consumer from a consumer group.

- Documentation: `XGROUP DELCONSUMER <https://redis.io/commands/xgroup-delconsumer>`_
- Implementation: :meth:`~coredis.Redis.xgroup_delconsumer`



- .. versionadded:: 3.0.0





XGROUP DESTROY
**************

Destroy a consumer group.

- Documentation: `XGROUP DESTROY <https://redis.io/commands/xgroup-destroy>`_
- Implementation: :meth:`~coredis.Redis.xgroup_destroy`







XGROUP SETID
************

Set a consumer group to an arbitrary last delivered ID value.

- Documentation: `XGROUP SETID <https://redis.io/commands/xgroup-setid>`_
- Implementation: :meth:`~coredis.Redis.xgroup_setid`



- .. versionadded:: 3.0.0





XINFO CONSUMERS
***************

List the consumers in a consumer group

- Documentation: `XINFO CONSUMERS <https://redis.io/commands/xinfo-consumers>`_
- Implementation: :meth:`~coredis.Redis.xinfo_consumers`







XINFO GROUPS
************

List the consumer groups of a stream

- Documentation: `XINFO GROUPS <https://redis.io/commands/xinfo-groups>`_
- Implementation: :meth:`~coredis.Redis.xinfo_groups`







XINFO STREAM
************

Get information about a stream

- Documentation: `XINFO STREAM <https://redis.io/commands/xinfo-stream>`_
- Implementation: :meth:`~coredis.Redis.xinfo_stream`







XLEN
****

Return the number of entries in a stream

- Documentation: `XLEN <https://redis.io/commands/xlen>`_
- Implementation: :meth:`~coredis.Redis.xlen`







XPENDING
********

Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.

- Documentation: `XPENDING <https://redis.io/commands/xpending>`_
- Implementation: :meth:`~coredis.Redis.xpending`







XRANGE
******

Return a range of elements in a stream, with IDs matching the specified IDs interval

- Documentation: `XRANGE <https://redis.io/commands/xrange>`_
- Implementation: :meth:`~coredis.Redis.xrange`







XREAD
*****

Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.

- Documentation: `XREAD <https://redis.io/commands/xread>`_
- Implementation: :meth:`~coredis.Redis.xread`







XREADGROUP
**********

Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.

- Documentation: `XREADGROUP <https://redis.io/commands/xreadgroup>`_
- Implementation: :meth:`~coredis.Redis.xreadgroup`







XREVRANGE
*********

Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE

- Documentation: `XREVRANGE <https://redis.io/commands/xrevrange>`_
- Implementation: :meth:`~coredis.Redis.xrevrange`







XTRIM
*****

Trims the stream to (approximately if '~' is passed) a certain size

- Documentation: `XTRIM <https://redis.io/commands/xtrim>`_
- Implementation: :meth:`~coredis.Redis.xtrim`










Scripting
---------



EVAL
****

Execute a Lua script server side

- Documentation: `EVAL <https://redis.io/commands/eval>`_
- Implementation: :meth:`~coredis.Redis.eval`







EVALSHA
*******

Execute a Lua script server side

- Documentation: `EVALSHA <https://redis.io/commands/evalsha>`_
- Implementation: :meth:`~coredis.Redis.evalsha`







EVALSHA_RO
**********

Execute a read-only Lua script server side

- Documentation: `EVALSHA_RO <https://redis.io/commands/evalsha_ro>`_
- Implementation: :meth:`~coredis.Redis.evalsha_ro`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





EVAL_RO
*******

Execute a read-only Lua script server side

- Documentation: `EVAL_RO <https://redis.io/commands/eval_ro>`_
- Implementation: :meth:`~coredis.Redis.eval_ro`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





FCALL
*****

Invoke a function

- Documentation: `FCALL <https://redis.io/commands/fcall>`_
- Implementation: :meth:`~coredis.Redis.fcall`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





FCALL_RO
********

Invoke a read-only function

- Documentation: `FCALL_RO <https://redis.io/commands/fcall_ro>`_
- Implementation: :meth:`~coredis.Redis.fcall_ro`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





FUNCTION DELETE
***************

Delete a function by name

- Documentation: `FUNCTION DELETE <https://redis.io/commands/function-delete>`_
- Implementation: :meth:`~coredis.Redis.function_delete`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





FUNCTION DUMP
*************

Dump all functions into a serialized binary payload

- Documentation: `FUNCTION DUMP <https://redis.io/commands/function-dump>`_
- Implementation: :meth:`~coredis.Redis.function_dump`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





FUNCTION FLUSH
**************

Deleting all functions

- Documentation: `FUNCTION FLUSH <https://redis.io/commands/function-flush>`_
- Implementation: :meth:`~coredis.Redis.function_flush`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





FUNCTION KILL
*************

Kill the function currently in execution.

- Documentation: `FUNCTION KILL <https://redis.io/commands/function-kill>`_
- Implementation: :meth:`~coredis.Redis.function_kill`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





FUNCTION LIST
*************

List information about all the functions

- Documentation: `FUNCTION LIST <https://redis.io/commands/function-list>`_
- Implementation: :meth:`~coredis.Redis.function_list`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





FUNCTION LOAD
*************

Create a function with the given arguments (name, code, description)

- Documentation: `FUNCTION LOAD <https://redis.io/commands/function-load>`_
- Implementation: :meth:`~coredis.Redis.function_load`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





FUNCTION RESTORE
****************

Restore all the functions on the given payload

- Documentation: `FUNCTION RESTORE <https://redis.io/commands/function-restore>`_
- Implementation: :meth:`~coredis.Redis.function_restore`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





FUNCTION STATS
**************

Return information about the function currently running (name, description, duration)

- Documentation: `FUNCTION STATS <https://redis.io/commands/function-stats>`_
- Implementation: :meth:`~coredis.Redis.function_stats`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





SCRIPT DEBUG
************

Set the debug mode for executed scripts.

- Documentation: `SCRIPT DEBUG <https://redis.io/commands/script-debug>`_
- Implementation: :meth:`~coredis.Redis.script_debug`



- .. versionadded:: 3.0.0





SCRIPT EXISTS
*************

Check existence of scripts in the script cache.

- Documentation: `SCRIPT EXISTS <https://redis.io/commands/script-exists>`_
- Implementation: :meth:`~coredis.Redis.script_exists`







SCRIPT FLUSH
************

Remove all the scripts from the script cache.

- Documentation: `SCRIPT FLUSH <https://redis.io/commands/script-flush>`_
- Implementation: :meth:`~coredis.Redis.script_flush`







SCRIPT KILL
***********

Kill the script currently in execution.

- Documentation: `SCRIPT KILL <https://redis.io/commands/script-kill>`_
- Implementation: :meth:`~coredis.Redis.script_kill`







SCRIPT LOAD
***********

Load the specified Lua script into the script cache.

- Documentation: `SCRIPT LOAD <https://redis.io/commands/script-load>`_
- Implementation: :meth:`~coredis.Redis.script_load`










Pubsub
------



PUBLISH
*******

Post a message to a channel

- Documentation: `PUBLISH <https://redis.io/commands/publish>`_
- Implementation: :meth:`~coredis.Redis.publish`







PUBSUB CHANNELS
***************

List active channels

- Documentation: `PUBSUB CHANNELS <https://redis.io/commands/pubsub-channels>`_
- Implementation: :meth:`~coredis.Redis.pubsub_channels`







PUBSUB NUMPAT
*************

Get the count of unique patterns pattern subscriptions

- Documentation: `PUBSUB NUMPAT <https://redis.io/commands/pubsub-numpat>`_
- Implementation: :meth:`~coredis.Redis.pubsub_numpat`







PUBSUB NUMSUB
*************

Get the count of subscribers for channels

- Documentation: `PUBSUB NUMSUB <https://redis.io/commands/pubsub-numsub>`_
- Implementation: :meth:`~coredis.Redis.pubsub_numsub`







PSUBSCRIBE [X]
**************

Listen for messages published to channels matching the given patterns

- Documentation: `PSUBSCRIBE <https://redis.io/commands/psubscribe>`_
 
- Not Implemented


PUBSUB SHARDCHANNELS [X]
************************

List active shard channels

- Documentation: `PUBSUB SHARDCHANNELS <https://redis.io/commands/pubsub-shardchannels>`_
 
- Not Implemented


PUBSUB SHARDNUMSUB [X]
**********************

Get the count of subscribers for shard channels

- Documentation: `PUBSUB SHARDNUMSUB <https://redis.io/commands/pubsub-shardnumsub>`_
 
- Not Implemented


PUNSUBSCRIBE [X]
****************

Stop listening for messages posted to channels matching the given patterns

- Documentation: `PUNSUBSCRIBE <https://redis.io/commands/punsubscribe>`_
 
- Not Implemented


SPUBLISH [X]
************

Post a message to a shard channel

- Documentation: `SPUBLISH <https://redis.io/commands/spublish>`_
 
- Not Implemented


SSUBSCRIBE [X]
**************

Listen for messages published to the given shard channels

- Documentation: `SSUBSCRIBE <https://redis.io/commands/ssubscribe>`_
 
- Not Implemented


SUBSCRIBE [X]
*************

Listen for messages published to the given channels

- Documentation: `SUBSCRIBE <https://redis.io/commands/subscribe>`_
 
- Not Implemented


SUNSUBSCRIBE [X]
****************

Stop listening for messages posted to the given shard channels

- Documentation: `SUNSUBSCRIBE <https://redis.io/commands/sunsubscribe>`_
 
- Not Implemented


UNSUBSCRIBE [X]
***************

Stop listening for messages posted to the given channels

- Documentation: `UNSUBSCRIBE <https://redis.io/commands/unsubscribe>`_
 
- Not Implemented





Transactions
------------



DISCARD [X]
***********

Discard all commands issued after MULTI

- Documentation: `DISCARD <https://redis.io/commands/discard>`_
 
- Not Implemented


EXEC [X]
********

Execute all commands issued after MULTI

- Documentation: `EXEC <https://redis.io/commands/exec>`_
 
- Not Implemented


MULTI [X]
*********

Mark the start of a transaction block

- Documentation: `MULTI <https://redis.io/commands/multi>`_
 
- Not Implemented


UNWATCH [X]
***********

Forget about all watched keys

- Documentation: `UNWATCH <https://redis.io/commands/unwatch>`_
 
- Not Implemented


WATCH [X]
*********

Watch the given keys to determine execution of the MULTI/EXEC block

- Documentation: `WATCH <https://redis.io/commands/watch>`_
 
- Not Implemented





Server
------



ACL CAT
*******

List the ACL categories or the commands inside a category

- Documentation: `ACL CAT <https://redis.io/commands/acl-cat>`_
- Implementation: :meth:`~coredis.Redis.acl_cat`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





ACL DELUSER
***********

Remove the specified ACL users and the associated rules

- Documentation: `ACL DELUSER <https://redis.io/commands/acl-deluser>`_
- Implementation: :meth:`~coredis.Redis.acl_deluser`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





ACL DRYRUN
**********

Returns whether the user can execute the given command without executing the command.

- Documentation: `ACL DRYRUN <https://redis.io/commands/acl-dryrun>`_
- Implementation: :meth:`~coredis.Redis.acl_dryrun`

- New in redis: 7.0.0



- .. versionadded:: 3.0.0





ACL GENPASS
***********

Generate a pseudorandom secure password to use for ACL users

- Documentation: `ACL GENPASS <https://redis.io/commands/acl-genpass>`_
- Implementation: :meth:`~coredis.Redis.acl_genpass`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





ACL GETUSER
***********

Get the rules for a specific ACL user

- Documentation: `ACL GETUSER <https://redis.io/commands/acl-getuser>`_
- Implementation: :meth:`~coredis.Redis.acl_getuser`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





ACL LIST
********

List the current ACL rules in ACL config file format

- Documentation: `ACL LIST <https://redis.io/commands/acl-list>`_
- Implementation: :meth:`~coredis.Redis.acl_list`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





ACL LOAD
********

Reload the ACLs from the configured ACL file

- Documentation: `ACL LOAD <https://redis.io/commands/acl-load>`_
- Implementation: :meth:`~coredis.Redis.acl_load`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





ACL LOG
*******

List latest events denied because of ACLs in place

- Documentation: `ACL LOG <https://redis.io/commands/acl-log>`_
- Implementation: :meth:`~coredis.Redis.acl_log`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





ACL SAVE
********

Save the current ACL rules in the configured ACL file

- Documentation: `ACL SAVE <https://redis.io/commands/acl-save>`_
- Implementation: :meth:`~coredis.Redis.acl_save`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





ACL SETUSER
***********

Modify or create the rules for a specific ACL user

- Documentation: `ACL SETUSER <https://redis.io/commands/acl-setuser>`_
- Implementation: :meth:`~coredis.Redis.acl_setuser`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





ACL USERS
*********

List the username of all the configured ACL rules

- Documentation: `ACL USERS <https://redis.io/commands/acl-users>`_
- Implementation: :meth:`~coredis.Redis.acl_users`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





ACL WHOAMI
**********

Return the name of the user associated to the current connection

- Documentation: `ACL WHOAMI <https://redis.io/commands/acl-whoami>`_
- Implementation: :meth:`~coredis.Redis.acl_whoami`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





BGREWRITEAOF
************

Asynchronously rewrite the append-only file

- Documentation: `BGREWRITEAOF <https://redis.io/commands/bgrewriteaof>`_
- Implementation: :meth:`~coredis.Redis.bgrewriteaof`







BGSAVE
******

Asynchronously save the dataset to disk

- Documentation: `BGSAVE <https://redis.io/commands/bgsave>`_
- Implementation: :meth:`~coredis.Redis.bgsave`







COMMAND
*******

Get array of Redis command details

- Documentation: `COMMAND <https://redis.io/commands/command>`_
- Implementation: :meth:`~coredis.Redis.command`



- .. versionadded:: 3.0.0





COMMAND COUNT
*************

Get total number of Redis commands

- Documentation: `COMMAND COUNT <https://redis.io/commands/command-count>`_
- Implementation: :meth:`~coredis.Redis.command_count`



- .. versionadded:: 3.0.0





COMMAND GETKEYS
***************

Extract keys given a full Redis command

- Documentation: `COMMAND GETKEYS <https://redis.io/commands/command-getkeys>`_
- Implementation: :meth:`~coredis.Redis.command_getkeys`



- .. versionadded:: 3.0.0





COMMAND INFO
************

Get array of specific Redis command details, or all when no argument is given.

- Documentation: `COMMAND INFO <https://redis.io/commands/command-info>`_
- Implementation: :meth:`~coredis.Redis.command_info`



- .. versionadded:: 3.0.0





CONFIG GET
**********

Get the values of configuration parameters

- Documentation: `CONFIG GET <https://redis.io/commands/config-get>`_
- Implementation: :meth:`~coredis.Redis.config_get`







CONFIG RESETSTAT
****************

Reset the stats returned by INFO

- Documentation: `CONFIG RESETSTAT <https://redis.io/commands/config-resetstat>`_
- Implementation: :meth:`~coredis.Redis.config_resetstat`







CONFIG REWRITE
**************

Rewrite the configuration file with the in memory configuration

- Documentation: `CONFIG REWRITE <https://redis.io/commands/config-rewrite>`_
- Implementation: :meth:`~coredis.Redis.config_rewrite`







CONFIG SET
**********

Set configuration parameters to the given values

- Documentation: `CONFIG SET <https://redis.io/commands/config-set>`_
- Implementation: :meth:`~coredis.Redis.config_set`







DBSIZE
******

Return the number of keys in the selected database

- Documentation: `DBSIZE <https://redis.io/commands/dbsize>`_
- Implementation: :meth:`~coredis.Redis.dbsize`







FAILOVER
********

Start a coordinated failover between this server and one of its replicas.

- Documentation: `FAILOVER <https://redis.io/commands/failover>`_
- Implementation: :meth:`~coredis.Redis.failover`

- New in redis: 6.2.0



- .. versionadded:: 3.0.0





FLUSHALL
********

Remove all keys from all databases

- Documentation: `FLUSHALL <https://redis.io/commands/flushall>`_
- Implementation: :meth:`~coredis.Redis.flushall`







FLUSHDB
*******

Remove all keys from the current database

- Documentation: `FLUSHDB <https://redis.io/commands/flushdb>`_
- Implementation: :meth:`~coredis.Redis.flushdb`







INFO
****

Get information and statistics about the server

- Documentation: `INFO <https://redis.io/commands/info>`_
- Implementation: :meth:`~coredis.Redis.info`







LASTSAVE
********

Get the UNIX time stamp of the last successful save to disk

- Documentation: `LASTSAVE <https://redis.io/commands/lastsave>`_
- Implementation: :meth:`~coredis.Redis.lastsave`







LATENCY DOCTOR
**************

Return a human readable latency analysis report.

- Documentation: `LATENCY DOCTOR <https://redis.io/commands/latency-doctor>`_
- Implementation: :meth:`~coredis.Redis.latency_doctor`



- .. versionadded:: 3.0.0





LATENCY GRAPH
*************

Return a latency graph for the event.

- Documentation: `LATENCY GRAPH <https://redis.io/commands/latency-graph>`_
- Implementation: :meth:`~coredis.Redis.latency_graph`



- .. versionadded:: 3.0.0





LATENCY HISTORY
***************

Return timestamp-latency samples for the event.

- Documentation: `LATENCY HISTORY <https://redis.io/commands/latency-history>`_
- Implementation: :meth:`~coredis.Redis.latency_history`



- .. versionadded:: 3.0.0





LATENCY LATEST
**************

Return the latest latency samples for all events.

- Documentation: `LATENCY LATEST <https://redis.io/commands/latency-latest>`_
- Implementation: :meth:`~coredis.Redis.latency_latest`



- .. versionadded:: 3.0.0





LATENCY RESET
*************

Reset latency data for one or more events.

- Documentation: `LATENCY RESET <https://redis.io/commands/latency-reset>`_
- Implementation: :meth:`~coredis.Redis.latency_reset`



- .. versionadded:: 3.0.0





LOLWUT
******

Display some computer art and the Redis version

- Documentation: `LOLWUT <https://redis.io/commands/lolwut>`_
- Implementation: :meth:`~coredis.Redis.lolwut`







MEMORY DOCTOR
*************

Outputs memory problems report

- Documentation: `MEMORY DOCTOR <https://redis.io/commands/memory-doctor>`_
- Implementation: :meth:`~coredis.Redis.memory_doctor`



- .. versionadded:: 3.0.0





MEMORY MALLOC-STATS
*******************

Show allocator internal stats

- Documentation: `MEMORY MALLOC-STATS <https://redis.io/commands/memory-malloc-stats>`_
- Implementation: :meth:`~coredis.Redis.memory_malloc_stats`



- .. versionadded:: 3.0.0





MEMORY PURGE
************

Ask the allocator to release memory

- Documentation: `MEMORY PURGE <https://redis.io/commands/memory-purge>`_
- Implementation: :meth:`~coredis.Redis.memory_purge`



- .. versionadded:: 3.0.0





MEMORY STATS
************

Show memory usage details

- Documentation: `MEMORY STATS <https://redis.io/commands/memory-stats>`_
- Implementation: :meth:`~coredis.Redis.memory_stats`



- .. versionadded:: 3.0.0





MEMORY USAGE
************

Estimate the memory usage of a key

- Documentation: `MEMORY USAGE <https://redis.io/commands/memory-usage>`_
- Implementation: :meth:`~coredis.Redis.memory_usage`



- .. versionadded:: 3.0.0





MONITOR
*******

Listen for all requests received by the server in real time

- Documentation: `MONITOR <https://redis.io/commands/monitor>`_
- Implementation: :meth:`~coredis.Redis.monitor`







REPLICAOF
*********

Make the server a replica of another instance, or promote it as master.

- Documentation: `REPLICAOF <https://redis.io/commands/replicaof>`_
- Implementation: :meth:`~coredis.Redis.replicaof`



- .. versionadded:: 3.0.0





ROLE
****

Return the role of the instance in the context of replication

- Documentation: `ROLE <https://redis.io/commands/role>`_
- Implementation: :meth:`~coredis.Redis.role`







SAVE
****

Synchronously save the dataset to disk

- Documentation: `SAVE <https://redis.io/commands/save>`_
- Implementation: :meth:`~coredis.Redis.save`







SHUTDOWN
********

Synchronously save the dataset to disk and then shut down the server

- Documentation: `SHUTDOWN <https://redis.io/commands/shutdown>`_
- Implementation: :meth:`~coredis.Redis.shutdown`







SLAVEOF
*******

Make the server a replica of another instance, or promote it as master.

- Documentation: `SLAVEOF <https://redis.io/commands/slaveof>`_
- Implementation: :meth:`~coredis.Redis.slaveof`


- Deprecated in redis: 5.0.0. Use :meth:`~coredis.Redis.replicaof`






SLOWLOG GET
***********

Get the slow log's entries

- Documentation: `SLOWLOG GET <https://redis.io/commands/slowlog-get>`_
- Implementation: :meth:`~coredis.Redis.slowlog_get`







SLOWLOG LEN
***********

Get the slow log's length

- Documentation: `SLOWLOG LEN <https://redis.io/commands/slowlog-len>`_
- Implementation: :meth:`~coredis.Redis.slowlog_len`







SLOWLOG RESET
*************

Clear all entries from the slow log

- Documentation: `SLOWLOG RESET <https://redis.io/commands/slowlog-reset>`_
- Implementation: :meth:`~coredis.Redis.slowlog_reset`







SWAPDB
******

Swaps two Redis databases

- Documentation: `SWAPDB <https://redis.io/commands/swapdb>`_
- Implementation: :meth:`~coredis.Redis.swapdb`



- .. versionadded:: 3.0.0





TIME
****

Return the current server time

- Documentation: `TIME <https://redis.io/commands/time>`_
- Implementation: :meth:`~coredis.Redis.time`







COMMAND DOCS [X]
****************

Get array of specific Redis command documentation

- Documentation: `COMMAND DOCS <https://redis.io/commands/command-docs>`_
 
- Not Implemented


COMMAND GETKEYSANDFLAGS [X]
***************************

Extract keys given a full Redis command

- Documentation: `COMMAND GETKEYSANDFLAGS <https://redis.io/commands/command-getkeysandflags>`_
 
- Not Implemented


COMMAND LIST [X]
****************

Get an array of Redis command names

- Documentation: `COMMAND LIST <https://redis.io/commands/command-list>`_
 
- Not Implemented


LATENCY HISTOGRAM [X]
*********************

Return the cumulative distribution of latencies of a subset of commands or all.

- Documentation: `LATENCY HISTOGRAM <https://redis.io/commands/latency-histogram>`_
 
- Not Implemented


MODULE LIST [X]
***************

List all modules loaded by the server

- Documentation: `MODULE LIST <https://redis.io/commands/module-list>`_
 
- Not Implemented


MODULE LOAD [X]
***************

Load a module

- Documentation: `MODULE LOAD <https://redis.io/commands/module-load>`_
 
- Not Implemented


MODULE UNLOAD [X]
*****************

Unload a module

- Documentation: `MODULE UNLOAD <https://redis.io/commands/module-unload>`_
 
- Not Implemented





Connection
----------



AUTH
****

Authenticate to the server

- Documentation: `AUTH <https://redis.io/commands/auth>`_
- Implementation: :meth:`~coredis.Redis.auth`



- .. versionadded:: 3.0.0





CLIENT CACHING
**************

Instruct the server about tracking or not keys in the next request

- Documentation: `CLIENT CACHING <https://redis.io/commands/client-caching>`_
- Implementation: :meth:`~coredis.Redis.client_caching`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





CLIENT GETNAME
**************

Get the current connection name

- Documentation: `CLIENT GETNAME <https://redis.io/commands/client-getname>`_
- Implementation: :meth:`~coredis.Redis.client_getname`







CLIENT GETREDIR
***************

Get tracking notifications redirection client ID if any

- Documentation: `CLIENT GETREDIR <https://redis.io/commands/client-getredir>`_
- Implementation: :meth:`~coredis.Redis.client_getredir`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





CLIENT ID
*********

Returns the client ID for the current connection

- Documentation: `CLIENT ID <https://redis.io/commands/client-id>`_
- Implementation: :meth:`~coredis.Redis.client_id`



- .. versionadded:: 3.0.0





CLIENT INFO
***********

Returns information about the current client connection.

- Documentation: `CLIENT INFO <https://redis.io/commands/client-info>`_
- Implementation: :meth:`~coredis.Redis.client_info`

- New in redis: 6.2.0



- .. versionadded:: 3.0.0





CLIENT KILL
***********

Kill the connection of a client

- Documentation: `CLIENT KILL <https://redis.io/commands/client-kill>`_
- Implementation: :meth:`~coredis.Redis.client_kill`







CLIENT LIST
***********

Get the list of client connections

- Documentation: `CLIENT LIST <https://redis.io/commands/client-list>`_
- Implementation: :meth:`~coredis.Redis.client_list`







CLIENT PAUSE
************

Stop processing commands from clients for some time

- Documentation: `CLIENT PAUSE <https://redis.io/commands/client-pause>`_
- Implementation: :meth:`~coredis.Redis.client_pause`







CLIENT REPLY
************

Instruct the server whether to reply to commands

- Documentation: `CLIENT REPLY <https://redis.io/commands/client-reply>`_
- Implementation: :meth:`~coredis.Redis.client_reply`



- .. versionadded:: 3.0.0





CLIENT SETNAME
**************

Set the current connection name

- Documentation: `CLIENT SETNAME <https://redis.io/commands/client-setname>`_
- Implementation: :meth:`~coredis.Redis.client_setname`







CLIENT TRACKING
***************

Enable or disable server assisted client side caching support

- Documentation: `CLIENT TRACKING <https://redis.io/commands/client-tracking>`_
- Implementation: :meth:`~coredis.Redis.client_tracking`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





CLIENT TRACKINGINFO
*******************

Return information about server assisted client side caching for the current connection

- Documentation: `CLIENT TRACKINGINFO <https://redis.io/commands/client-trackinginfo>`_
- Implementation: :meth:`~coredis.Redis.client_trackinginfo`

- New in redis: 6.2.0



- .. versionadded:: 3.0.0





CLIENT UNBLOCK
**************

Unblock a client blocked in a blocking command from a different connection

- Documentation: `CLIENT UNBLOCK <https://redis.io/commands/client-unblock>`_
- Implementation: :meth:`~coredis.Redis.client_unblock`



- .. versionadded:: 3.0.0





CLIENT UNPAUSE
**************

Resume processing of clients that were paused

- Documentation: `CLIENT UNPAUSE <https://redis.io/commands/client-unpause>`_
- Implementation: :meth:`~coredis.Redis.client_unpause`

- New in redis: 6.2.0



- .. versionadded:: 3.0.0





ECHO
****

Echo the given string

- Documentation: `ECHO <https://redis.io/commands/echo>`_
- Implementation: :meth:`~coredis.Redis.echo`







HELLO
*****

Handshake with Redis

- Documentation: `HELLO <https://redis.io/commands/hello>`_
- Implementation: :meth:`~coredis.Redis.hello`

- New in redis: 6.0.0



- .. versionadded:: 3.0.0





PING
****

Ping the server

- Documentation: `PING <https://redis.io/commands/ping>`_
- Implementation: :meth:`~coredis.Redis.ping`







QUIT
****

Close the connection

- Documentation: `QUIT <https://redis.io/commands/quit>`_
- Implementation: :meth:`~coredis.Redis.quit`







RESET
*****

Reset the connection

- Documentation: `RESET <https://redis.io/commands/reset>`_
- Implementation: :meth:`~coredis.Redis.reset`

- New in redis: 6.2.0



- .. versionadded:: 3.0.0





SELECT
******

Change the selected database for the current connection

- Documentation: `SELECT <https://redis.io/commands/select>`_
- Implementation: :meth:`~coredis.Redis.select`



- .. versionadded:: 3.0.0





CLIENT NO-EVICT [X]
*******************

Set client eviction mode for the current connection

- Documentation: `CLIENT NO-EVICT <https://redis.io/commands/client-no-evict>`_
 
- Not Implemented





Cluster
-------



ASKING
******

Sent by cluster clients after an -ASK redirect

- Documentation: `ASKING <https://redis.io/commands/asking>`_
- Implementation: :meth:`~coredis.Redis.asking`



- .. versionadded:: 3.0.0





CLUSTER ADDSLOTS
****************

Assign new hash slots to receiving node

- Documentation: `CLUSTER ADDSLOTS <https://redis.io/commands/cluster-addslots>`_
- Implementation: :meth:`~coredis.Redis.cluster_addslots`







CLUSTER BUMPEPOCH
*****************

Advance the cluster config epoch

- Documentation: `CLUSTER BUMPEPOCH <https://redis.io/commands/cluster-bumpepoch>`_
- Implementation: :meth:`~coredis.Redis.cluster_bumpepoch`



- .. versionadded:: 3.0.0





CLUSTER COUNT-FAILURE-REPORTS
*****************************

Return the number of failure reports active for a given node

- Documentation: `CLUSTER COUNT-FAILURE-REPORTS <https://redis.io/commands/cluster-count-failure-reports>`_
- Implementation: :meth:`~coredis.Redis.cluster_count_failure_reports`







CLUSTER COUNTKEYSINSLOT
***********************

Return the number of local keys in the specified hash slot

- Documentation: `CLUSTER COUNTKEYSINSLOT <https://redis.io/commands/cluster-countkeysinslot>`_
- Implementation: :meth:`~coredis.Redis.cluster_countkeysinslot`







CLUSTER DELSLOTS
****************

Set hash slots as unbound in receiving node

- Documentation: `CLUSTER DELSLOTS <https://redis.io/commands/cluster-delslots>`_
- Implementation: :meth:`~coredis.Redis.cluster_delslots`







CLUSTER FAILOVER
****************

Forces a replica to perform a manual failover of its master.

- Documentation: `CLUSTER FAILOVER <https://redis.io/commands/cluster-failover>`_
- Implementation: :meth:`~coredis.Redis.cluster_failover`







CLUSTER FLUSHSLOTS
******************

Delete a node's own slots information

- Documentation: `CLUSTER FLUSHSLOTS <https://redis.io/commands/cluster-flushslots>`_
- Implementation: :meth:`~coredis.Redis.cluster_flushslots`



- .. versionadded:: 3.0.0





CLUSTER FORGET
**************

Remove a node from the nodes table

- Documentation: `CLUSTER FORGET <https://redis.io/commands/cluster-forget>`_
- Implementation: :meth:`~coredis.Redis.cluster_forget`







CLUSTER GETKEYSINSLOT
*********************

Return local key names in the specified hash slot

- Documentation: `CLUSTER GETKEYSINSLOT <https://redis.io/commands/cluster-getkeysinslot>`_
- Implementation: :meth:`~coredis.Redis.cluster_getkeysinslot`



- .. versionadded:: 3.0.0





CLUSTER INFO
************

Provides info about Redis Cluster node state

- Documentation: `CLUSTER INFO <https://redis.io/commands/cluster-info>`_
- Implementation: :meth:`~coredis.Redis.cluster_info`







CLUSTER KEYSLOT
***************

Returns the hash slot of the specified key

- Documentation: `CLUSTER KEYSLOT <https://redis.io/commands/cluster-keyslot>`_
- Implementation: :meth:`~coredis.Redis.cluster_keyslot`







CLUSTER MEET
************

Force a node cluster to handshake with another node

- Documentation: `CLUSTER MEET <https://redis.io/commands/cluster-meet>`_
- Implementation: :meth:`~coredis.Redis.cluster_meet`







CLUSTER NODES
*************

Get Cluster config for the node

- Documentation: `CLUSTER NODES <https://redis.io/commands/cluster-nodes>`_
- Implementation: :meth:`~coredis.Redis.cluster_nodes`







CLUSTER REPLICAS
****************

List replica nodes of the specified master node

- Documentation: `CLUSTER REPLICAS <https://redis.io/commands/cluster-replicas>`_
- Implementation: :meth:`~coredis.Redis.cluster_replicas`







CLUSTER REPLICATE
*****************

Reconfigure a node as a replica of the specified master node

- Documentation: `CLUSTER REPLICATE <https://redis.io/commands/cluster-replicate>`_
- Implementation: :meth:`~coredis.Redis.cluster_replicate`







CLUSTER RESET
*************

Reset a Redis Cluster node

- Documentation: `CLUSTER RESET <https://redis.io/commands/cluster-reset>`_
- Implementation: :meth:`~coredis.Redis.cluster_reset`







CLUSTER SAVECONFIG
******************

Forces the node to save cluster state on disk

- Documentation: `CLUSTER SAVECONFIG <https://redis.io/commands/cluster-saveconfig>`_
- Implementation: :meth:`~coredis.Redis.cluster_saveconfig`







CLUSTER SET-CONFIG-EPOCH
************************

Set the configuration epoch in a new node

- Documentation: `CLUSTER SET-CONFIG-EPOCH <https://redis.io/commands/cluster-set-config-epoch>`_
- Implementation: :meth:`~coredis.Redis.cluster_set_config_epoch`







CLUSTER SETSLOT
***************

Bind a hash slot to a specific node

- Documentation: `CLUSTER SETSLOT <https://redis.io/commands/cluster-setslot>`_
- Implementation: :meth:`~coredis.Redis.cluster_setslot`







CLUSTER SLAVES
**************

List replica nodes of the specified master node

- Documentation: `CLUSTER SLAVES <https://redis.io/commands/cluster-slaves>`_
- Implementation: :meth:`~coredis.Redis.cluster_slaves`


- Deprecated in redis: 5.0.0. Use :meth:`~coredis.Redis.cluster_replicas`






CLUSTER SLOTS
*************

Get array of Cluster slot to node mappings

- Documentation: `CLUSTER SLOTS <https://redis.io/commands/cluster-slots>`_
- Implementation: :meth:`~coredis.Redis.cluster_slots`







CLUSTER ADDSLOTSRANGE [X]
*************************

Assign new hash slots to receiving node

- Documentation: `CLUSTER ADDSLOTSRANGE <https://redis.io/commands/cluster-addslotsrange>`_
 
- Not Implemented


CLUSTER DELSLOTSRANGE [X]
*************************

Set hash slots as unbound in receiving node

- Documentation: `CLUSTER DELSLOTSRANGE <https://redis.io/commands/cluster-delslotsrange>`_
 
- Not Implemented


CLUSTER LINKS [X]
*****************

Returns a list of all TCP links to and from peer nodes in cluster

- Documentation: `CLUSTER LINKS <https://redis.io/commands/cluster-links>`_
 
- Not Implemented


CLUSTER MYID [X]
****************

Return the node id

- Documentation: `CLUSTER MYID <https://redis.io/commands/cluster-myid>`_
 
- Not Implemented


READONLY [X]
************

Enables read queries for a connection to a cluster replica node

- Documentation: `READONLY <https://redis.io/commands/readonly>`_
 
- Not Implemented


READWRITE [X]
*************

Disables read queries for a connection to a cluster replica node

- Documentation: `READWRITE <https://redis.io/commands/readwrite>`_
 
- Not Implemented





    
Redis Cluster Client
^^^^^^^^^^^^^^^^^^^^

 
.. note:: 
        The Cluster client generally follows the API of :class:`~coredis.Redis`
        however for cross-slot commands certain commands have to be implemented
        client side. 
        



Generic
-------



DEL
***

Delete a key

- Documentation: `DEL <https://redis.io/commands/del>`_
- Implementation: :meth:`~coredis.RedisCluster.delete`







RENAME
******

Rename a key

- Documentation: `RENAME <https://redis.io/commands/rename>`_
- Implementation: :meth:`~coredis.RedisCluster.rename`







RENAMENX
********

Rename a key, only if the new key does not exist

- Documentation: `RENAMENX <https://redis.io/commands/renamenx>`_
- Implementation: :meth:`~coredis.RedisCluster.renamenx`







SORT
****

Sort the elements in a list, set or sorted set

- Documentation: `SORT <https://redis.io/commands/sort>`_
- Implementation: :meth:`~coredis.RedisCluster.sort`







TYPE
****

Determine the type stored at key

- Documentation: `TYPE <https://redis.io/commands/type>`_
- Implementation: :meth:`~coredis.RedisCluster.type`










String
------



MGET
****

Get the values of all the given keys

- Documentation: `MGET <https://redis.io/commands/mget>`_
- Implementation: :meth:`~coredis.RedisCluster.mget`







MSET
****

Set multiple keys to multiple values

- Documentation: `MSET <https://redis.io/commands/mset>`_
- Implementation: :meth:`~coredis.RedisCluster.mset`







MSETNX
******

Set multiple keys to multiple values, only if none of the keys exist

- Documentation: `MSETNX <https://redis.io/commands/msetnx>`_
- Implementation: :meth:`~coredis.RedisCluster.msetnx`







SET
***

Set the string value of a key

- Documentation: `SET <https://redis.io/commands/set>`_
- Implementation: :meth:`~coredis.RedisCluster.set`














List
----



BRPOPLPUSH
**********

Pop an element from a list, push it to another list and return it; or block until one is available

- Documentation: `BRPOPLPUSH <https://redis.io/commands/brpoplpush>`_
- Implementation: :meth:`~coredis.RedisCluster.brpoplpush`


- Deprecated in redis: 6.2.0. Use :meth:`~coredis.RedisCluster.blmove` with the ``right`` and ``left`` arguments






RPOPLPUSH
*********

Remove the last element in a list, prepend it to another list and return it

- Documentation: `RPOPLPUSH <https://redis.io/commands/rpoplpush>`_
- Implementation: :meth:`~coredis.RedisCluster.rpoplpush`


- Deprecated in redis: 6.2.0. Use :meth:`~coredis.RedisCluster.lmove` with the ``right`` and ``left`` arguments









Set
---



SDIFF
*****

Subtract multiple sets

- Documentation: `SDIFF <https://redis.io/commands/sdiff>`_
- Implementation: :meth:`~coredis.RedisCluster.sdiff`







SDIFFSTORE
**********

Subtract multiple sets and store the resulting set in a key

- Documentation: `SDIFFSTORE <https://redis.io/commands/sdiffstore>`_
- Implementation: :meth:`~coredis.RedisCluster.sdiffstore`







SINTER
******

Intersect multiple sets

- Documentation: `SINTER <https://redis.io/commands/sinter>`_
- Implementation: :meth:`~coredis.RedisCluster.sinter`







SINTERSTORE
***********

Intersect multiple sets and store the resulting set in a key

- Documentation: `SINTERSTORE <https://redis.io/commands/sinterstore>`_
- Implementation: :meth:`~coredis.RedisCluster.sinterstore`







SMOVE
*****

Move a member from one set to another

- Documentation: `SMOVE <https://redis.io/commands/smove>`_
- Implementation: :meth:`~coredis.RedisCluster.smove`







SUNION
******

Add multiple sets

- Documentation: `SUNION <https://redis.io/commands/sunion>`_
- Implementation: :meth:`~coredis.RedisCluster.sunion`







SUNIONSTORE
***********

Add multiple sets and store the resulting set in a key

- Documentation: `SUNIONSTORE <https://redis.io/commands/sunionstore>`_
- Implementation: :meth:`~coredis.RedisCluster.sunionstore`


















Scripting
---------



EVAL
****

Execute a Lua script server side

- Documentation: `EVAL <https://redis.io/commands/eval>`_
- Implementation: :meth:`~coredis.RedisCluster.eval`










Pubsub
------



PSUBSCRIBE [X]
**************

Listen for messages published to channels matching the given patterns

- Documentation: `PSUBSCRIBE <https://redis.io/commands/psubscribe>`_
 
- Not Implemented


PUBSUB SHARDCHANNELS [X]
************************

List active shard channels

- Documentation: `PUBSUB SHARDCHANNELS <https://redis.io/commands/pubsub-shardchannels>`_
 
- Not Implemented


PUBSUB SHARDNUMSUB [X]
**********************

Get the count of subscribers for shard channels

- Documentation: `PUBSUB SHARDNUMSUB <https://redis.io/commands/pubsub-shardnumsub>`_
 
- Not Implemented


PUNSUBSCRIBE [X]
****************

Stop listening for messages posted to channels matching the given patterns

- Documentation: `PUNSUBSCRIBE <https://redis.io/commands/punsubscribe>`_
 
- Not Implemented


SPUBLISH [X]
************

Post a message to a shard channel

- Documentation: `SPUBLISH <https://redis.io/commands/spublish>`_
 
- Not Implemented


SSUBSCRIBE [X]
**************

Listen for messages published to the given shard channels

- Documentation: `SSUBSCRIBE <https://redis.io/commands/ssubscribe>`_
 
- Not Implemented


SUBSCRIBE [X]
*************

Listen for messages published to the given channels

- Documentation: `SUBSCRIBE <https://redis.io/commands/subscribe>`_
 
- Not Implemented


SUNSUBSCRIBE [X]
****************

Stop listening for messages posted to the given shard channels

- Documentation: `SUNSUBSCRIBE <https://redis.io/commands/sunsubscribe>`_
 
- Not Implemented


UNSUBSCRIBE [X]
***************

Stop listening for messages posted to the given channels

- Documentation: `UNSUBSCRIBE <https://redis.io/commands/unsubscribe>`_
 
- Not Implemented





Transactions
------------



DISCARD [X]
***********

Discard all commands issued after MULTI

- Documentation: `DISCARD <https://redis.io/commands/discard>`_
 
- Not Implemented


EXEC [X]
********

Execute all commands issued after MULTI

- Documentation: `EXEC <https://redis.io/commands/exec>`_
 
- Not Implemented


MULTI [X]
*********

Mark the start of a transaction block

- Documentation: `MULTI <https://redis.io/commands/multi>`_
 
- Not Implemented


UNWATCH [X]
***********

Forget about all watched keys

- Documentation: `UNWATCH <https://redis.io/commands/unwatch>`_
 
- Not Implemented


WATCH [X]
*********

Watch the given keys to determine execution of the MULTI/EXEC block

- Documentation: `WATCH <https://redis.io/commands/watch>`_
 
- Not Implemented





Server
------



COMMAND DOCS [X]
****************

Get array of specific Redis command documentation

- Documentation: `COMMAND DOCS <https://redis.io/commands/command-docs>`_
 
- Not Implemented


COMMAND GETKEYSANDFLAGS [X]
***************************

Extract keys given a full Redis command

- Documentation: `COMMAND GETKEYSANDFLAGS <https://redis.io/commands/command-getkeysandflags>`_
 
- Not Implemented


COMMAND LIST [X]
****************

Get an array of Redis command names

- Documentation: `COMMAND LIST <https://redis.io/commands/command-list>`_
 
- Not Implemented


LATENCY HISTOGRAM [X]
*********************

Return the cumulative distribution of latencies of a subset of commands or all.

- Documentation: `LATENCY HISTOGRAM <https://redis.io/commands/latency-histogram>`_
 
- Not Implemented


MODULE LIST [X]
***************

List all modules loaded by the server

- Documentation: `MODULE LIST <https://redis.io/commands/module-list>`_
 
- Not Implemented


MODULE LOAD [X]
***************

Load a module

- Documentation: `MODULE LOAD <https://redis.io/commands/module-load>`_
 
- Not Implemented


MODULE UNLOAD [X]
*****************

Unload a module

- Documentation: `MODULE UNLOAD <https://redis.io/commands/module-unload>`_
 
- Not Implemented


MONITOR [X]
***********

Listen for all requests received by the server in real time

- Documentation: `MONITOR <https://redis.io/commands/monitor>`_
 
- Not Implemented





Connection
----------



QUIT
****

Close the connection

- Documentation: `QUIT <https://redis.io/commands/quit>`_
- Implementation: :meth:`~coredis.RedisCluster.quit`







CLIENT NO-EVICT [X]
*******************

Set client eviction mode for the current connection

- Documentation: `CLIENT NO-EVICT <https://redis.io/commands/client-no-evict>`_
 
- Not Implemented





Cluster
-------



CLUSTER ADDSLOTSRANGE [X]
*************************

Assign new hash slots to receiving node

- Documentation: `CLUSTER ADDSLOTSRANGE <https://redis.io/commands/cluster-addslotsrange>`_
 
- Not Implemented


CLUSTER DELSLOTSRANGE [X]
*************************

Set hash slots as unbound in receiving node

- Documentation: `CLUSTER DELSLOTSRANGE <https://redis.io/commands/cluster-delslotsrange>`_
 
- Not Implemented


CLUSTER LINKS [X]
*****************

Returns a list of all TCP links to and from peer nodes in cluster

- Documentation: `CLUSTER LINKS <https://redis.io/commands/cluster-links>`_
 
- Not Implemented


CLUSTER MYID [X]
****************

Return the node id

- Documentation: `CLUSTER MYID <https://redis.io/commands/cluster-myid>`_
 
- Not Implemented


READONLY [X]
************

Enables read queries for a connection to a cluster replica node

- Documentation: `READONLY <https://redis.io/commands/readonly>`_
 
- Not Implemented


READWRITE [X]
*************

Disables read queries for a connection to a cluster replica node

- Documentation: `READWRITE <https://redis.io/commands/readwrite>`_
 
- Not Implemented





    